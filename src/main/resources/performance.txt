Starting a Gradle Daemon, 3 busy and 1 incompatible Daemons could not be reused, use --status for details
:clean
:compileJava
:processResources NO-SOURCE
:classes
:run
# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: C:\Program Files\Java\jdk1.8.0_201\jre\bin\java.exe
# VM options: -Xms2G -Xmx2G
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: other.App.alphabetizerNormal
# Parameters: (N = 10000000)

# Run progress: 0.00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 24794.701 ms/op
# Warmup Iteration   2: 25329.834 ms/op
# Warmup Iteration   3: 28298.866 ms/op
# Warmup Iteration   4: 29796.334 ms/op
# Warmup Iteration   5: 30159.041 ms/op
Iteration   1: 29515.098 ms/op
Iteration   2: 30395.295 ms/op
Iteration   3: 29566.284 ms/op
Iteration   4: 29876.151 ms/op
Iteration   5: 30021.053 ms/op


Result "other.App.alphabetizerNormal":
  29874.776 ±(99.9%) 1384.189 ms/op [Average]
  (min, avg, max) = (29515.098, 29874.776, 30395.295), stdev = 359.470
  CI (99.9%): [28490.587, 31258.966] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_201, Java HotSpot(TM) 64-Bit Server VM, 25.201-b09
# VM invoker: C:\Program Files\Java\jdk1.8.0_201\jre\bin\java.exe
# VM options: -Xms2G -Xmx2G
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: other.App.alphabetizerStream
# Parameters: (N = 10000000)

# Run progress: 50.00% complete, ETA 00:04:56
# Fork: 1 of 1
# Warmup Iteration   1: 30766.656 ms/op
# Warmup Iteration   2: 30120.293 ms/op
# Warmup Iteration   3: 29797.246 ms/op
# Warmup Iteration   4: 29048.572 ms/op
# Warmup Iteration   5: 29510.893 ms/op
Iteration   1: 29691.875 ms/op
Iteration   2: 29506.778 ms/op
Iteration   3: 29457.272 ms/op
Iteration   4: 29203.738 ms/op
Iteration   5: 29458.335 ms/op


Result "other.App.alphabetizerStream":
  29463.600 ±(99.9%) 671.300 ms/op [Average]
  (min, avg, max) = (29203.738, 29463.600, 29691.875), stdev = 174.334
  CI (99.9%): [28792.300, 30134.899] (assumes normal distribution)


# Run complete. Total time: 00:10:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                    (N)  Mode  Cnt      Score      Error  Units
App.alphabetizerNormal  10000000  avgt    5  29874.776 ± 1384.189  ms/op
App.alphabetizerStream  10000000  avgt    5  29463.600 ±  671.300  ms/op

BUILD SUCCESSFUL in 10m 18s
3 actionable tasks: 3 executed
