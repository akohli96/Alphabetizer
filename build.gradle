buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

plugins {
    id "com.google.protobuf" version "0.8.5"
    id "java"
    id "application"
    id "idea"
    id 'com.github.ben-manes.versions' version '0.19.0'
}

def grpcV = '1.12.0'
def protocV = '3.6.0'
def jUnitV = '4.1.2'
def hamcrestV = '1.3'

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocV}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcV}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

group 'io.alphabetizer.alphabetize.grpc'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'io.grpc', name: 'grpc-all', version: grpcV
    testCompile group: 'junit', name: 'junit', version: jUnitV
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: hamcrestV
    testImplementation group: 'io.grpc', name: 'grpc-testing', version: grpcV
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java")
        sourceDirs += file("${projectDir}/src/generated/main/grpc")
    }
}

task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'server.AlphabetizerServer'
}

task runClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'client.AlphabetizerClientApplication'
}

startScripts.enabled = false

task alphabetizerServer(type: CreateStartScripts) {
    mainClassName = "server.AlphabetizerServer"
    applicationName = "alphabetizer-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task alphabetizerClient(type: CreateStartScripts) {
    mainClassName = "client.AlphabetizerClientApplication"
    applicationName = "alphabetizer-client"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {
    from(alphabetizerServer)
    from(alphabetizerClient)
    fileMode = 0755
}